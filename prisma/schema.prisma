// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  firstName     String?
  lastName      String?
  email         String    @unique
  phoneNumber   String?
  password      String?
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Airline {
  id      Int      @id @default(autoincrement())
  name    String // Name of the airline
  logo    String // URL or file path of the airline logo
  flights Flight[] @relation("AirlineFlights")
}

model Location {
  id                   Int      @id @default(autoincrement())
  code                 String   @unique // Unique code for the location (e.g., airport code)
  name                 String // Name of the location (e.g., city, airport name)
  flightsAsOrigin      Flight[] @relation("OriginFlights")
  flightsAsDestination Flight[] @relation("DestinationFlights")
}

model Flight {
  id              Int      @id @default(autoincrement())
  airlineId       Int
  originCode      String
  destinationCode String
  logo            String // URL or file path of the flight logo
  points          Float // Rating points for the flight (e.g., 4.2)
  reviews         Int // Number of reviews for the flight
  departureTime   DateTime // Departure time of the flight
  arrivalTime     DateTime // Arrival time of the flight
  isReturnTrip    Boolean // Indicates if the flight is non-stop or not
  totalHours      Int // Total duration of the flight in hours

  // Relations
  airline     Airline   @relation("AirlineFlights", fields: [airlineId], references: [id])
  origin      Location  @relation("OriginFlights", fields: [originCode], references: [code])
  destination Location  @relation("DestinationFlights", fields: [destinationCode], references: [code])
  Booking     Booking[]
}

model Passenger {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  // Add any other fields related to the passenger, such as age, gender, etc.
  Booking   Booking[]
}

model Booking {
  id          Int      @id @default(autoincrement())
  flightId    Int
  passengerId Int
  bookingDate DateTime @default(now())
  // Add any other fields related to the booking, such as seat number, status, etc.

  // Relations
  flight    Flight    @relation(fields: [flightId], references: [id])
  passenger Passenger @relation(fields: [passengerId], references: [id])
}
